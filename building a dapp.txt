Creating a Decentralized Application (DApp) to store a to-do list using Solidity and deploying it involves several steps, from smart contract development to front-end integration and deployment. Here's a step-by-step guide:

### Step 1: Setup Development Environment
To start, you'll need to set up the development environment.

#### Tools Needed:
- **Node.js & npm**: Install Node.js, which includes npm (Node package manager).
- **Truffle**: A development framework for Ethereum.
- **Ganache**: A personal Ethereum blockchain for testing.
- **Metamask**: A browser extension that allows interaction with Ethereum-based DApps.
- **Solidity**: Smart contract programming language.
- **Infura** (optional for testnet/mainnet deployment): Provides access to the Ethereum network.

Install Truffle globally:
```bash
npm install -g truffle
```

Install Ganache (download the GUI or use Ganache CLI).

Install MetaMask and set it up with a wallet.

### Step 2: Create a New Truffle Project
Create a new folder for your project, then initialize the Truffle project.

```bash
mkdir TodoDApp
cd TodoDApp
truffle init
```

This creates a basic project structure with folders for contracts, migrations, and tests.

### Step 3: Develop the Smart Contract
Next, create a smart contract that will store the to-do list on the Ethereum blockchain.

#### Create a file `TodoList.sol` under the `contracts/` directory:

```solidity
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract TodoList {
    struct Todo {
        string text;
        bool completed;
    }

    Todo[] public todos;

    function addTodo(string memory _text) public {
        todos.push(Todo({
            text: _text,
            completed: false
        }));
    }

    function toggleComplete(uint256 _index) public {
        Todo storage todo = todos[_index];
        todo.completed = !todo.completed;
    }

    function getTodos() public view returns (string[] memory, bool[] memory) {
        string[] memory texts = new string[](todos.length);
        bool[] memory completed = new bool[](todos.length);

        for (uint256 i = 0; i < todos.length; i++) {
            texts[i] = todos[i].text;
            completed[i] = todos[i].completed;
        }

        return (texts, completed);
    }
}
```

In this contract:
- **addTodo**: Adds a new to-do item.
- **toggleComplete**: Marks a to-do as complete or incomplete.
- **getTodos**: Fetches all the to-dos, including their status.

### Step 4: Compile the Smart Contract
Now, compile your Solidity contract using Truffle.

```bash
truffle compile
```

This will generate the ABI (Application Binary Interface) and bytecode necessary to deploy the contract.

### Step 5: Deploy the Smart Contract
Create a migration script under `migrations/` directory (e.g., `2_deploy_contracts.js`):

```javascript
const TodoList = artifacts.require("TodoList");

module.exports = function (deployer) {
  deployer.deploy(TodoList);
};
```

Now, deploy your contract to the local Ethereum network (Ganache):

```bash
truffle migrate --network development
```

Ensure Ganache is running and your Truffle project is configured to connect to it.

### Step 6: Set Up Front-End
You can now start building the front-end. A simple HTML/JS page can interact with the Ethereum network and display the to-do list.

#### Front-End Code:
1. Install the necessary dependencies (web3.js to interact with Ethereum):
   ```bash
   npm install web3
   ```

2. Create an HTML file (`index.html`):

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Todo DApp</title>
</head>
<body>
    <h1>Todo List DApp</h1>
    <input type="text" id="todoText" placeholder="Enter a new task">
    <button id="addTodo">Add Todo</button>
    <ul id="todoList"></ul>

    <script src="https://cdn.jsdelivr.net/npm/web3@1.3.5/dist/web3.min.js"></script>
    <script>
        let web3;
        let todoListContract;

        window.onload = async () => {
            if (window.ethereum) {
                web3 = new Web3(window.ethereum);
                await window.ethereum.enable(); // Request account access
                const networkId = await web3.eth.net.getId();
                const deployedNetwork = TodoList.networks[networkId];
                todoListContract = new web3.eth.Contract(
                    TodoList.abi,
                    deployedNetwork.address
                );

                loadTodos();
            } else {
                alert("Please install MetaMask to interact with this DApp.");
            }

            document.getElementById('addTodo').addEventListener('click', async () => {
                const todoText = document.getElementById('todoText').value;
                const accounts = await web3.eth.getAccounts();
                await todoListContract.methods.addTodo(todoText).send({ from: accounts[0] });
                loadTodos();
            });
        };

        async function loadTodos() {
            const todos = await todoListContract.methods.getTodos().call();
            const todoList = document.getElementById('todoList');
            todoList.innerHTML = '';
            for (let i = 0; i < todos[0].length; i++) {
                const li = document.createElement('li');
                li.innerText = `${todos[0][i]} - ${todos[1][i] ? 'Completed' : 'Pending'}`;
                todoList.appendChild(li);
            }
        }
    </script>
</body>
</html>
```

### Step 7: Run the DApp Locally
To run the DApp locally, serve the HTML file using any local server, for example, using `live-server` or the `http-server` npm package.

### Step 8: Deploy to Testnet
After testing the DApp on your local Ganache blockchain, you can deploy the contract to a testnet like Rinkeby, Ropsten, or Goerli.

1. Configure Truffle to use Infura or any Ethereum node provider (in `truffle-config.js`).
2. Fund your wallet with testnet Ether via a faucet.
3. Run the migration for the testnet:
   ```bash
   truffle migrate --network rinkeby
   ```

### Step 9: Connect Your Front-End to the Deployed Contract
Update your front-end code to connect to the deployed contract on the testnet by replacing the contract address in your front-end JavaScript.

### Step 10: Deploy to Mainnet (Optional)
Once you are happy with your DApp, you can deploy the contract to the Ethereum mainnet. To do this, ensure you have sufficient Ether in your MetaMask wallet and run:

```bash
truffle migrate --network mainnet
```

### Final Notes:
- Always test your DApp on a testnet before deploying to the mainnet.
- Security audits for smart contracts are critical when dealing with real value (especially on mainnet).
- You can further improve your DApp by adding features like user authentication with MetaMask, using IPFS for storing content off-chain, etc.

That's a high-level overview of the process from beginning to end. Happy building!




// SPDX-License-Identifier: MIT
pragma solidity ^0.8.21;

// make a contract ToDoList
contract ToDoList {
    // contract should store a list of tasks and their completed status
    struct Todo {
        string text;
        bool completed;
    }
    Todo[] public todos;

    // make a function to add to the list
    function addTodo(string memory _text) public{
        todos.push(Todo({
            text:_text,
            completed:false
        }));
    }

    // make a function to toggle status
    function toggleTodo(uint256 _index) public {
        require(_index < todos.length, "Not in list");
        todos[_index].completed = !todos[_index].completed;
    }

    // make a function to display all todos
    function getTodos() public view returns(string[] memory, bool[] memory){
        string[] memory texts = new string[](todos.length);
        bool[] memory completed = new bool[](todos.length);

        for(uint256 i = 0;  i < todos.length; i ++ ){
            texts[i] = todos[i].text;
            completed[i] = todos[i].completed;
        }

        return (texts, completed);
    }
}
